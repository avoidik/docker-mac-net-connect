name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  build-go:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goos: [darwin]
        goarch: [amd64, arm64]
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version-file: 'go.mod'

    - name: Build Go project for ${{ matrix.goos }}/${{ matrix.goarch }}
      run: |
        VERSION=$(git describe --tags --always)
        LD_FLAGS="-s -w -X github.com/avoidik/docker-mac-net-connect/version.Version=${VERSION} -X github.com/avoidik/docker-mac-net-connect/version.SetupImage=ghcr.io/avoidik/docker-mac-net-connect/setup"
        GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} go build -ldflags "${LD_FLAGS}" -o docker-mac-net-connect-${{ matrix.goos }}-${{ matrix.goarch }} github.com/avoidik/docker-mac-net-connect

    - name: Upload binary artifact
      uses: actions/upload-artifact@v4
      with:
        name: docker-mac-net-connect-${{ matrix.goos }}-${{ matrix.goarch }}
        path: docker-mac-net-connect-${{ matrix.goos }}-${{ matrix.goarch }}

  build-docker:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/avoidik/docker-mac-net-connect/setup
        tags: |
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./client
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}

  release:
    needs: [build-go, build-docker]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
    - uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Prepare release assets
      run: |
        mkdir -p release-assets
        find artifacts -name "docker-mac-net-connect-*" -type f -exec cp {} release-assets/ \;
        cd release-assets
        for file in docker-mac-net-connect-*; do
          if [ -f "$file" ]; then
            tar -czf "${file}.tar.gz" "$file"
            sha256sum "${file}.tar.gz" > "${file}.tar.gz.sha256"
          fi
        done

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        files: release-assets/*
        generate_release_notes: true
        draft: false
        prerelease: false